import{K as q,W as L,n as C,m as F,J as S,H as R,a7 as D}from"./particle.3af7776a.js";import{g as _}from"./CanvasUtils.a9ca2be4.js";import"./index.424da776.js";function O(c,s,n,i){c.beginPath(),c.moveTo(s.x,s.y),c.lineTo(n.x,n.y),c.lineTo(i.x,i.y),c.closePath()}function z(c){let s=!1;const{begin:n,end:i,maxDistance:e,context:t,canvasSize:o,width:a,backgroundMask:u,colorLine:h,opacity:p,links:g}=c;if(q(n,i)<=e)_(t,n,i),s=!0;else if(g.warp){let r,k;const b={x:i.x-o.width,y:i.y},w=L(n,b);if(w.distance<=e){const y=n.y-w.dy/w.dx*n.x;r={x:0,y},k={x:o.width,y}}else{const y={x:i.x,y:i.y-o.height},f=L(n,y);if(f.distance<=e){const d=-(n.y-f.dy/f.dx*n.x)/(f.dy/f.dx);r={x:d,y:0},k={x:d,y:o.height}}else{const x={x:i.x-o.width,y:i.y-o.height},d=L(n,x);if(d.distance<=e){const m=n.y-d.dy/d.dx*n.x;r={x:-m/(d.dy/d.dx),y:m},k={x:r.x+o.width,y:r.y+o.height}}}}r&&k&&(_(t,n,r),_(t,i,k),s=!0)}if(!s)return;t.lineWidth=a,u.enable&&(t.globalCompositeOperation=u.composite),t.strokeStyle=C(h,p);const{shadow:l}=g;if(l.enable){const r=F(l.color);r&&(t.shadowBlur=l.blur,t.shadowColor=C(r))}t.stroke()}function E(c){const{context:s,pos1:n,pos2:i,pos3:e,backgroundMask:t,colorTriangle:o,opacityTriangle:a}=c;O(s,n,i,e),t.enable&&(s.globalCompositeOperation=t.composite),s.fillStyle=C(o,a),s.fill()}function I(c){return c.sort((s,n)=>s-n),c.join("_")}function M(c,s){const n=I(c.map(e=>e.id));let i=s.get(n);return i===void 0&&(i=S(),s.set(n,i)),i}const P=0,T=0,v=0,K=.5,j=1;class N{constructor(s){this.container=s,this._drawLinkLine=(n,i)=>{const e=n.options.links;if(!(e!=null&&e.enable))return;const t=this.container,o=t.actualOptions,a=i.destination,u=n.getPosition(),h=a.getPosition();let p=i.opacity;t.canvas.draw(g=>{var y,f,x;let l;const r=(y=n.options.twinkle)==null?void 0:y.lines;if(r!=null&&r.enable){const d=r.frequency,m=F(r.color);S()<d&&m&&(l=m,p=R(r.opacity))}if(!l){const d=e.id!==void 0?t.particles.linksColors.get(e.id):t.particles.linksColor;l=D(n,a,d)}if(!l)return;const k=(f=n.retina.linksWidth)!=null?f:T,b=(x=n.retina.linksDistance)!=null?x:v,{backgroundMask:w}=o;z({context:g,width:k,begin:u,end:h,maxDistance:b,canvasSize:t.canvas.size,links:e,backgroundMask:w,colorLine:l,opacity:p})})},this._drawLinkTriangle=(n,i,e)=>{var l;const t=n.options.links;if(!(t!=null&&t.enable))return;const o=t.triangles;if(!o.enable)return;const a=this.container,u=a.actualOptions,h=i.destination,p=e.destination,g=(l=o.opacity)!=null?l:(i.opacity+e.opacity)*K;g<=P||a.canvas.draw(r=>{var x;const k=n.getPosition(),b=h.getPosition(),w=p.getPosition(),y=(x=n.retina.linksDistance)!=null?x:v;if(q(k,b)>y||q(w,b)>y||q(w,k)>y)return;let f=F(o.color);if(!f){const d=t.id!==void 0?a.particles.linksColors.get(t.id):a.particles.linksColor;f=D(n,h,d)}!f||E({context:r,pos1:k,pos2:b,pos3:w,backgroundMask:u.backgroundMask,colorTriangle:f,opacityTriangle:g})})},this._drawTriangles=(n,i,e,t)=>{var u,h,p;const o=e.destination;if(!(((u=n.links)==null?void 0:u.triangles.enable)&&((h=o.options.links)==null?void 0:h.triangles.enable)))return;const a=(p=o.links)==null?void 0:p.filter(g=>{const l=this._getLinkFrequency(o,g.destination),r=0;return o.options.links&&l<=o.options.links.frequency&&t.findIndex(k=>k.destination===g.destination)>=r});if(!!(a!=null&&a.length))for(const g of a){const l=g.destination;this._getTriangleFrequency(i,o,l)>n.links.triangles.frequency||this._drawLinkTriangle(i,e,g)}},this._getLinkFrequency=(n,i)=>M([n,i],this._freqs.links),this._getTriangleFrequency=(n,i,e)=>M([n,i,e],this._freqs.triangles),this._freqs={links:new Map,triangles:new Map}}drawParticle(s,n){var o;const{links:i,options:e}=n;if(!(i!=null&&i.length))return;const t=i.filter(a=>e.links&&(e.links.frequency>=j||this._getLinkFrequency(n,a.destination)<=e.links.frequency));for(const a of t)this._drawTriangles(e,n,a,t),a.opacity>P&&((o=n.retina.linksWidth)!=null?o:T)>T&&this._drawLinkLine(n,a)}async init(){this._freqs.links=new Map,this._freqs.triangles=new Map,await Promise.resolve()}particleCreated(s){if(s.links=[],!s.options.links)return;const n=this.container.retina.pixelRatio,{retina:i}=s,{distance:e,width:t}=s.options.links;i.linksDistance=e*n,i.linksWidth=t*n}particleDestroyed(s){s.links=[]}}export{N as LinkInstance};
